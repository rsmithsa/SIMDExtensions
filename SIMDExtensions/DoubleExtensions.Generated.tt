<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\SIMDExtensions.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SIMDExtensions" #>
<#@ output extension=".cs" #>
//-----------------------------------------------------------------------
// <copyright file="DoubleExtensions.Generated.cs" company="Richard Smith">
//     Copyright (c) Richard Smith. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace SIMDExtensions
{
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Text;

    public static partial class DoubleExtensions
    {
<#
	foreach (var function in DoubleExtensions.UnaryFunctions)
	{
#>
		public static Span<double> <#=function#>(this ReadOnlySpan<double> first)
		{
			ValidateParameters(first);

            var result = new double[first.Length];

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, result);
            }
            else
            {
                <#=function#>Fallback(first, result);
            }

            return result;
		}

		public static double[] <#=function#>(this double[] first)
		{
			ValidateParameters(first);

            var result = new double[first.Length];

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, result);
            }
            else
            {
                <#=function#>Fallback(first, result);
            }

            return result;
		}

		public static Span<double> <#=function#>Assign(this Span<double> first)
        {
            ValidateParameters(first);

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, first);
            }
            else
            {
                <#=function#>Fallback(first, first);
            }

            return first;
        }

		public static double[] <#=function#>Assign(this double[] first)
        {
            ValidateParameters(first);

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, first);
            }
            else
            {
                <#=function#>Fallback(first, first);
            }

            return first;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void <#=function#>Simd(in ReadOnlySpan<double> first, in Span<double> result)
		{
			int vectorizedLength = (first.Length / Vector<double>.Count) * Vector<double>.Count;

            ReadOnlySpan<Vector<double>> vFirst = MemoryMarshal.Cast<double, Vector<double>>(first.Slice(0, vectorizedLength));

            Span<Vector<double>> vResult = MemoryMarshal.Cast<double, Vector<double>>(result.Slice(0, vectorizedLength));

            for (int i = 0; i < vFirst.Length; i++)
            {
                vResult[i] = <#=function#>VectorImplementation(vFirst[i]);
            }

            for (int i = vectorizedLength; i < first.Length; i++)
            {
                result[i] = <#=function#>ScalarImplementation(first[i]);
            }
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void <#=function#>Fallback(in ReadOnlySpan<double> first, in Span<double> result)
		{
			for (int i = 0; i < first.Length; i++)
            {
                result[i] = <#=function#>ScalarImplementation(first[i]);
            }
		}
<#
	}
#>

<#
	foreach (var function in DoubleExtensions.BinaryFunctions)
	{
#>
		public static Span<double> <#=function#>(this ReadOnlySpan<double> first, in ReadOnlySpan<double> second)
		{
			ValidateParameters(first, second);

            var result = new double[first.Length];

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, result);
            }
            else
            {
                <#=function#>Fallback(first, second, result);
            }

            return result;
		}

		public static double[] <#=function#>(this double[] first, in double[] second)
		{
			ValidateParameters(first, second);

            var result = new double[first.Length];

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, result);
            }
            else
            {
                <#=function#>Fallback(first, second, result);
            }

            return result;
		}

		public static Span<double> <#=function#>Assign(this Span<double> first, in ReadOnlySpan<double> second)
        {
            ValidateParameters(first, second);

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, first);
            }
            else
            {
                <#=function#>Fallback(first, second, first);
            }

            return first;
        }

		public static double[] <#=function#>Assign(this double[] first, in double[] second)
        {
            ValidateParameters(first, second);

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, first);
            }
            else
            {
                <#=function#>Fallback(first, second, first);
            }

            return first;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void <#=function#>Simd(in ReadOnlySpan<double> first, in ReadOnlySpan<double> second, in Span<double> result)
		{
			int vectorizedLength = (first.Length / Vector<double>.Count) * Vector<double>.Count;

            ReadOnlySpan<Vector<double>> vFirst = MemoryMarshal.Cast<double, Vector<double>>(first.Slice(0, vectorizedLength));

            ReadOnlySpan<Vector<double>> vSecond = MemoryMarshal.Cast<double, Vector<double>>(second.Slice(0, vectorizedLength));

            Span<Vector<double>> vResult = MemoryMarshal.Cast<double, Vector<double>>(result.Slice(0, vectorizedLength));

            for (int i = 0; i < vFirst.Length; i++)
            {
                vResult[i] = <#=function#>VectorImplementation(vFirst[i], vSecond[i]);
            }

            for (int i = vectorizedLength; i < first.Length; i++)
            {
                result[i] = <#=function#>ScalarImplementation(first[i], second[i]);
            }
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void <#=function#>Fallback(in ReadOnlySpan<double> first, in ReadOnlySpan<double> second, in Span<double> result)
		{
			for (int i = 0; i < first.Length; i++)
            {
                result[i] = <#=function#>ScalarImplementation(first[i], second[i]);
            }
		}
<#
	}
#>

<#
	foreach (var function in DoubleExtensions.ScalarFunctions)
	{
#>
		public static Span<double> <#=function#>(this ReadOnlySpan<double> first, in double second)
		{
			ValidateParameters(first);

            var result = new double[first.Length];

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, result);
            }
            else
            {
                <#=function#>Fallback(first, second, result);
            }

            return result;
		}

		public static double[] <#=function#>(this double[] first, in double second)
		{
			ValidateParameters(first);

            var result = new double[first.Length];

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, result);
            }
            else
            {
                <#=function#>Fallback(first, second, result);
            }

            return result;
		}

		public static Span<double> <#=function#>Assign(this Span<double> first, in double second)
        {
            ValidateParameters(first);

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, first);
            }
            else
            {
                <#=function#>Fallback(first, second, first);
            }

            return first;
        }

		public static double[] <#=function#>Assign(this double[] first, in double second)
        {
            ValidateParameters(first);

            if (Vector.IsHardwareAccelerated)
            {
                <#=function#>Simd(first, second, first);
            }
            else
            {
                <#=function#>Fallback(first, second, first);
            }

            return first;
        }

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void <#=function#>Simd(in ReadOnlySpan<double> first, in double second, in Span<double> result)
		{
			int vectorizedLength = (first.Length / Vector<double>.Count) * Vector<double>.Count;

            ReadOnlySpan<Vector<double>> vFirst = MemoryMarshal.Cast<double, Vector<double>>(first.Slice(0, vectorizedLength));

            Span<Vector<double>> vResult = MemoryMarshal.Cast<double, Vector<double>>(result.Slice(0, vectorizedLength));

            for (int i = 0; i < vFirst.Length; i++)
            {
                vResult[i] = <#=function#>VectorImplementation(vFirst[i], second);
            }

            for (int i = vectorizedLength; i < first.Length; i++)
            {
                result[i] = <#=function#>ScalarImplementation(first[i], second);
            }
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static void <#=function#>Fallback(in ReadOnlySpan<double> first, in double second, in Span<double> result)
		{
			for (int i = 0; i < first.Length; i++)
            {
                result[i] = <#=function#>ScalarImplementation(first[i], second);
            }
		}
<#
	}
#>

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static void ValidateParameters(in ReadOnlySpan<double> first)
        {
            if (first == null)
            {
                throw new ArgumentNullException(nameof(first));
            }
        }
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static void ValidateParameters(in ReadOnlySpan<double> first, in ReadOnlySpan<double> second)
        {
            if (first == null)
            {
                throw new ArgumentNullException(nameof(first));
            }

            if (second == null)
            {
                throw new ArgumentNullException(nameof(second));
            }

            if (first.Length != second.Length)
            {
                throw new ArgumentException("Array length's must be the same.");
            }
        }
	}
}